Ansible Role: Django
====================

The provision_tag.sh script
---------------------------

By setting the variable "disabled_by_default" to false some tasks are
disabled by default.

They can be run one by one using their tags and the following command
or simply by using "provision_tag.sh":

    ansible-playbook \
        --private-key=.vagrant/machines/default/virtualbox/private_key \
        -i provisioning/inventory \
        -l vagrant \
        -u vagrant \
        --tags="$1" \
        --extra-vars '{"disabled_by_default": false}' \
        -vvvv \
        provisioning/site.yml


Development server
------------------

To run the Django development server manually (eg. from within PyCharm) the
gunicorn process has to be stopped.

There are two ways to accomplish that.
Inside the box tell supervisor to stop the process:

     sudo supervisorctl stop all

Or use an ansible task to stop the process for you. Run on the host system:

    ./provisioning/scripts/provision_tag.sh stop_webapp

The provision_tag.sh script is a helper to run the roles with the given tag
in the box.


Keeping the box updated
-----------------------

After changing the requirements.txt file you can either run provisioning again.
Or just the task to update the virtualenv (which is faster):

    ./provisioning/scripts/provision_tag.sh update_requirements

To apply new migrations run the following tag:

    ./provisioning/scripts/provision_tag.sh django_migrate


Restoring a database dump
-------------------------

After provisioning, delete and recreate the database without running migrations
or loading fixtures (no space between tags!):

    ./provisioning/scripts/provision_tag.sh drop_database,create_database

Then inside the box load the database dump:

    vagrant ssh
    ./manage.py dbshell < dump.sql

For easier local use I recommend resetting the admin password:

    ./manage.py changepassword admin


Importing a live database dump
------------------------------

The drop_database, create_database and import_database tags delete the current
database in the box and create an empty one. Then a fresh database dump will be
created on the production system, downloaded into the box and imported into the
empty database.

    ./provisioning/scripts/provision_tag.sh \
        drop_database,create_database,import_database


Other tags...
-------------

Useful tags to run one-off tasks in this role:

- update_requirements:
  update the requirements files from all configured *.in files and update the
  packages in the project's virtualenv from resulting requirements.txt

- django_migrate
  run manage.py migrate

- django_collectstatic
  run manage.py collectstatic

- django_compilemessages
  run manage.py compilemessages

- django_makemessages
  run manage.py makemessages and compilemessages

- stop_webapp:
  stop the webapp app via supervisor

- start_webapp
  (re)start the webapp via supervisor
